/*
 *
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.11.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"golang.org/x/net/context"
)

// Linger please
var (
	_ context.Context
)

type TranslationApiService service

/* TranslationApiService Retrieve translation for a given word
 Use this to return translations for a given word. In the event that a word in the dataset does not have a direct translation, the response will be a [definition](documentation/glossary?term&#x3D;entry) in the target language.    &lt;div id&#x3D;\&quot;translation\&quot;&gt;&lt;/div&gt;
* @param ctx context.Context for authentication, logging, tracing, etc.
@param sourceTranslationLanguage IANA language code
@param wordId The source word
@param targetTranslationLanguage IANA language code
@param appId App ID Authentication Parameter
@param appKey App Key Authentication Parameter
@return RetrieveEntry*/
func (a *TranslationApiService) EntriesSourceTranslationLanguageWordIdTranslationstargetTranslationLanguageGet(ctx context.Context, sourceTranslationLanguage string, wordId string, targetTranslationLanguage string, appId string, appKey string) (RetrieveEntry, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		successPayload     RetrieveEntry
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/entries/{source_translation_language}/{word_id}/translations={target_translation_language}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_translation_language"+"}", fmt.Sprintf("%v", sourceTranslationLanguage), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"word_id"+"}", fmt.Sprintf("%v", wordId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"target_translation_language"+"}", fmt.Sprintf("%v", targetTranslationLanguage), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(appId, "")
	localVarHeaderParams["app_key"] = parameterToString(appKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayload, localVarHttpResponse, err
}
