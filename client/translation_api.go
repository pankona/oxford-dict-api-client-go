/* 
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
	"fmt"
	"strings"
)

type TranslationApi struct {
	Configuration Configuration
}

func NewTranslationApi() *TranslationApi {
	configuration := NewConfiguration()
	return &TranslationApi{
		Configuration: *configuration,
	}
}

func NewTranslationApiWithBasePath(basePath string) *TranslationApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &TranslationApi{
		Configuration: *configuration,
	}
}

/**
 * Retrieve translation for a given word
 *  Use this to return translations for a given word. In the event that a word in the dataset does not have a direct translation, the response will be a [definition](documentation/glossary?term&#x3D;entry) in the target language.    &lt;div id&#x3D;\&quot;translation\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceTranslationLanguage IANA language code
 * @param wordId The source word
 * @param targetTranslationLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *RetrieveEntry
 */
func (a TranslationApi) EntriesSourceTranslationLanguageWordIdTranslationstargetTranslationLanguageGet(sourceTranslationLanguage string, wordId string, targetTranslationLanguage string, appId string, appKey string) (*RetrieveEntry, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/entries/{source_translation_language}/{word_id}/translations&#x3D;{target_translation_language}"
	path = strings.Replace(path, "{"+"source_translation_language"+"}", fmt.Sprintf("%v", sourceTranslationLanguage), -1)
	path = strings.Replace(path, "{"+"word_id"+"}", fmt.Sprintf("%v", wordId), -1)
	path = strings.Replace(path, "{"+"target_translation_language"+"}", fmt.Sprintf("%v", targetTranslationLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(RetrieveEntry)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

