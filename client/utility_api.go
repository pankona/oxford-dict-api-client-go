/* 
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
	"fmt"
	"strings"
)

type UtilityApi struct {
	Configuration Configuration
}

func NewUtilityApi() *UtilityApi {
	configuration := NewConfiguration()
	return &UtilityApi{
		Configuration: *configuration,
	}
}

func NewUtilityApiWithBasePath(basePath string) *UtilityApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &UtilityApi{
		Configuration: *configuration,
	}
}

/**
 * Lists available domains in a bilingual dataset
 * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
 *
 * @param sourceDomainsLanguage IANA language code
 * @param targetDomainsLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *UtilityLabels
 */
func (a UtilityApi) DomainsSourceDomainsLanguageTargetDomainsLanguageGet(sourceDomainsLanguage string, targetDomainsLanguage string, appId string, appKey string) (*UtilityLabels, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/domains/{source_domains_language}/{target_domains_language}"
	path = strings.Replace(path, "{"+"source_domains_language"+"}", fmt.Sprintf("%v", sourceDomainsLanguage), -1)
	path = strings.Replace(path, "{"+"target_domains_language"+"}", fmt.Sprintf("%v", targetDomainsLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(UtilityLabels)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available domains in a monolingual dataset
 * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
 *
 * @param sourceLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *UtilityLabels
 */
func (a UtilityApi) DomainsSourceLanguageGet(sourceLanguage string, appId string, appKey string) (*UtilityLabels, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/domains/{source_language}"
	path = strings.Replace(path, "{"+"source_language"+"}", fmt.Sprintf("%v", sourceLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(UtilityLabels)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available filters for specific endpoint
 * Returns a list of all the valid filters for a given endpoint to construct API calls. 
 *
 * @param endpoint Name of the endpoint.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *Filters
 */
func (a UtilityApi) FiltersEndpointGet(endpoint string, appId string, appKey string) (*Filters, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/filters/{endpoint}"
	path = strings.Replace(path, "{"+"endpoint"+"}", fmt.Sprintf("%v", endpoint), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Filters)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available filters
 * Returns a list of all the valid filters to construct API calls. 
 *
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *Filters
 */
func (a UtilityApi) FiltersGet(appId string, appKey string) (*Filters, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/filters"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Filters)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available grammatical features in a dataset
 * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
 *
 * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *UtilityLabels
 */
func (a UtilityApi) GrammaticalFeaturesSourceLanguageGet(sourceLanguage string, appId string, appKey string) (*UtilityLabels, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/grammaticalFeatures/{source_language}"
	path = strings.Replace(path, "{"+"source_language"+"}", fmt.Sprintf("%v", sourceLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(UtilityLabels)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available dictionaries
 * Returns a list of monolingual and bilingual language datasets available in the API 
 *
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage.
 * @param targetLanguage IANA language code. If provided output will be filtered by sourceLanguage.
 * @return *Languages
 */
func (a UtilityApi) LanguagesGet(appId string, appKey string, sourceLanguage string, targetLanguage string) (*Languages, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/languages"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("sourceLanguage", a.Configuration.APIClient.ParameterToString(sourceLanguage, ""))
			queryParams.Add("targetLanguage", a.Configuration.APIClient.ParameterToString(targetLanguage, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Languages)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available lexical categories in a dataset
 * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
 *
 * @param language IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *UtilityLabels
 */
func (a UtilityApi) LexicalcategoriesLanguageGet(language string, appId string, appKey string) (*UtilityLabels, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/lexicalcategories/{language}"
	path = strings.Replace(path, "{"+"language"+"}", fmt.Sprintf("%v", language), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(UtilityLabels)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available regions in a monolingual dataset
 * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
 *
 * @param sourceLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *Regions
 */
func (a UtilityApi) RegionsSourceLanguageGet(sourceLanguage string, appId string, appKey string) (*Regions, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/regions/{source_language}"
	path = strings.Replace(path, "{"+"source_language"+"}", fmt.Sprintf("%v", sourceLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Regions)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available registers in a  monolingual dataset
 * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
 *
 * @param sourceLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *UtilityLabels
 */
func (a UtilityApi) RegistersSourceLanguageGet(sourceLanguage string, appId string, appKey string) (*UtilityLabels, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/registers/{source_language}"
	path = strings.Replace(path, "{"+"source_language"+"}", fmt.Sprintf("%v", sourceLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(UtilityLabels)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Lists available registers in a bilingual dataset
 * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
 *
 * @param sourceRegisterLanguage IANA language code
 * @param targetRegisterLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *UtilityLabels
 */
func (a UtilityApi) RegistersSourceRegisterLanguageTargetRegisterLanguageGet(sourceRegisterLanguage string, targetRegisterLanguage string, appId string, appKey string) (*UtilityLabels, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/registers/{source_register_language}/{target_register_language}"
	path = strings.Replace(path, "{"+"source_register_language"+"}", fmt.Sprintf("%v", sourceRegisterLanguage), -1)
	path = strings.Replace(path, "{"+"target_register_language"+"}", fmt.Sprintf("%v", targetRegisterLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(UtilityLabels)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

