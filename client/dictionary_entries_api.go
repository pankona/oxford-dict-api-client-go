/* 
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
	"fmt"
	"strings"
)

type DictionaryEntriesApi struct {
	Configuration Configuration
}

func NewDictionaryEntriesApi() *DictionaryEntriesApi {
	configuration := NewConfiguration()
	return &DictionaryEntriesApi{
		Configuration: *configuration,
	}
}

func NewDictionaryEntriesApiWithBasePath(basePath string) *DictionaryEntriesApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &DictionaryEntriesApi{
		Configuration: *configuration,
	}
}

/**
 * Apply filters to response
 *  Use filters to limit the [entry](documentation/glossary?term&#x3D;entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term&#x3D;pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using &#39;&#x3D;&#39;. For example &#39;grammaticalFeatures&#x3D;singular&#39;. Filters can also be combined using a semicolon.    &lt;div id&#x3D;\&quot;dictionary_entries_filters\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceLang IANA language code
 * @param wordId An Entry identifier. Case-sensitive.
 * @param filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *RetrieveEntry
 */
func (a DictionaryEntriesApi) EntriesSourceLangWordIdFiltersGet(sourceLang string, wordId string, filters []string, appId string, appKey string) (*RetrieveEntry, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/entries/{source_lang}/{word_id}/{filters}"
	path = strings.Replace(path, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	path = strings.Replace(path, "{"+"word_id"+"}", fmt.Sprintf("%v", wordId), -1)
	path = strings.Replace(path, "{"+"filters"+"}", fmt.Sprintf("%v", filters), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(RetrieveEntry)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Retrieve dictionary information for a given word
 *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term&#x3D;pronunciation), example sentences, [grammatical information](documentation/glossary?term&#x3D;grammaticalfeatures) and [word origins](documentation/glossary?term&#x3D;etymology). It only works for dictionary [headwords](documentation/glossary?term&#x3D;headword), so you may need to use the [Lemmatron](documentation/glossary?term&#x3D;lemma) first if your input is likely to be an [inflected](documentation/glossary?term&#x3D;inflection) form (e.g., &#39;swimming&#39;). This would return the linked [headword](documentation/glossary?term&#x3D;headword) (e.g., &#39;swim&#39;) which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    &lt;div id&#x3D;\&quot;dictionary_entries\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceLang IANA language code
 * @param wordId An Entry identifier. Case-sensitive.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *RetrieveEntry
 */
func (a DictionaryEntriesApi) EntriesSourceLangWordIdGet(sourceLang string, wordId string, appId string, appKey string) (*RetrieveEntry, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/entries/{source_lang}/{word_id}"
	path = strings.Replace(path, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	path = strings.Replace(path, "{"+"word_id"+"}", fmt.Sprintf("%v", wordId), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(RetrieveEntry)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Specify GB or US dictionary for English entry search
 *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
 *
 * @param sourceLang IANA language code
 * @param wordId An Entry identifier. Case-sensitive.
 * @param region Region filter parameter. gb &#x3D; Oxford Dictionary of English. us &#x3D; New Oxford American Dictionary.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @return *RetrieveEntry
 */
func (a DictionaryEntriesApi) EntriesSourceLangWordIdRegionsregionGet(sourceLang string, wordId string, region string, appId string, appKey string) (*RetrieveEntry, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/entries/{source_lang}/{word_id}/regions&#x3D;{region}"
	path = strings.Replace(path, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	path = strings.Replace(path, "{"+"word_id"+"}", fmt.Sprintf("%v", wordId), -1)
	path = strings.Replace(path, "{"+"region"+"}", fmt.Sprintf("%v", region), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(RetrieveEntry)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

