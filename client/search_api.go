/* 
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
	"fmt"
	"strings"
)

type SearchApi struct {
	Configuration Configuration
}

func NewSearchApi() *SearchApi {
	configuration := NewConfiguration()
	return &SearchApi{
		Configuration: *configuration,
	}
}

func NewSearchApiWithBasePath(basePath string) *SearchApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &SearchApi{
		Configuration: *configuration,
	}
}

/**
 * Retrieve possible matches to input
 *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma)     &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceLang IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @param q Search string
 * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string.
 * @param regions If searching in English, filter words with specific region(s) either &#39;us&#39; or &#39;gb&#39;.
 * @param limit Limit the number of results per response. Default and maximum limit is 5000.
 * @param offset Offset the start number of the result.
 * @return *Wordlist
 */
func (a SearchApi) SearchSourceLangGet(sourceLang string, appId string, appKey string, q string, prefix bool, regions string, limit string, offset string) (*Wordlist, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/search/{source_lang}"
	path = strings.Replace(path, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("q", a.Configuration.APIClient.ParameterToString(q, ""))
			queryParams.Add("prefix", a.Configuration.APIClient.ParameterToString(prefix, ""))
			queryParams.Add("regions", a.Configuration.APIClient.ParameterToString(regions, ""))
			queryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Wordlist)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Retrieve possible translation matches to input
 *  Use this to find matches in our translation dictionaries.    &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceSearchLanguage IANA language code
 * @param targetSearchLanguage IANA language code
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @param q Search string.
 * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string.
 * @param regions Filter words with specific region(s) E.g., regions&#x3D;us. For now gb, us are available for en language.
 * @param limit Limit the number of results per response. Default and maximum limit is 5000.
 * @param offset Offset the start number of the result.
 * @return *Wordlist
 */
func (a SearchApi) SearchSourceSearchLanguageTranslationstargetSearchLanguageGet(sourceSearchLanguage string, targetSearchLanguage string, appId string, appKey string, q string, prefix bool, regions string, limit string, offset string) (*Wordlist, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/search/{source_search_language}/translations&#x3D;{target_search_language}"
	path = strings.Replace(path, "{"+"source_search_language"+"}", fmt.Sprintf("%v", sourceSearchLanguage), -1)
	path = strings.Replace(path, "{"+"target_search_language"+"}", fmt.Sprintf("%v", targetSearchLanguage), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("q", a.Configuration.APIClient.ParameterToString(q, ""))
			queryParams.Add("prefix", a.Configuration.APIClient.ParameterToString(prefix, ""))
			queryParams.Add("regions", a.Configuration.APIClient.ParameterToString(regions, ""))
			queryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Wordlist)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

