/*
 *
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.11.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"golang.org/x/net/context"
)

// Linger please
var (
	_ context.Context
)

type WordlistApiService service

/* WordlistApiService Retrieve list of words for category with advanced options
Use this to apply more complex filters to the [list of words](documentation/glossary?term&#x3D;wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term&#x3D;sense) match the filter, or only its &#39;prime sense&#39;. You can also filter by word length or match by substring (prefix).     &lt;div id&#x3D;\&quot;wordlist_advanced\&quot;&gt;&lt;/div&gt;
* @param ctx context.Context for authentication, logging, tracing, etc.
@param sourceLang IANA language code
@param filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5.
@param appId App ID Authentication Parameter
@param appKey App Key Authentication Parameter
@param optional (nil or map[string]interface{}) with one or more of:
    @param "exclude" (string) Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results.
    @param "excludeSenses" (string) Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses.
    @param "excludePrimeSenses" (string) Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only).
    @param "wordLength" (string) Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars.
    @param "prefix" (string) Filter words that start with prefix parameter
    @param "exact" (bool) If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string.
    @param "limit" (string) Limit the number of results per response. Default and maximum limit is 5000.
    @param "offset" (string) Offset the start number of the result.
@return Wordlist*/
func (a *WordlistApiService) WordlistSourceLangFiltersAdvancedGet(ctx context.Context, sourceLang string, filtersAdvanced string, appId string, appKey string, localVarOptionals map[string]interface{}) (Wordlist, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		successPayload     Wordlist
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/wordlist/{source_lang}/{filters_advanced}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"filters_advanced"+"}", fmt.Sprintf("%v", filtersAdvanced), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["exclude"], "string", "exclude"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["excludeSenses"], "string", "excludeSenses"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["excludePrimeSenses"], "string", "excludePrimeSenses"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["wordLength"], "string", "wordLength"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["prefix"], "string", "prefix"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["exact"], "bool", "exact"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["limit"], "string", "limit"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["offset"], "string", "offset"); err != nil {
		return successPayload, nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["exclude"].(string); localVarOk {
		localVarQueryParams.Add("exclude", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["excludeSenses"].(string); localVarOk {
		localVarQueryParams.Add("exclude_senses", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["excludePrimeSenses"].(string); localVarOk {
		localVarQueryParams.Add("exclude_prime_senses", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["wordLength"].(string); localVarOk {
		localVarQueryParams.Add("word_length", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["prefix"].(string); localVarOk {
		localVarQueryParams.Add("prefix", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["exact"].(bool); localVarOk {
		localVarQueryParams.Add("exact", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["limit"].(string); localVarOk {
		localVarQueryParams.Add("limit", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["offset"].(string); localVarOk {
		localVarQueryParams.Add("offset", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(appId, "")
	localVarHeaderParams["app_key"] = parameterToString(appKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayload, localVarHttpResponse, err
}

/* WordlistApiService Retrieve a list of words in a category
 Use this to retrieve a [list of words](documentation/glossary?term&#x3D;wordlist) for particular [domain](documentation/glossary?term&#x3D;domain), [lexical category](documentation/glossary?term&#x3D;lexicalcategory), [register](documentation/glossary?term&#x3D;registers) and/or [region](documentation/glossary?term&#x3D;regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term&#x3D;headword), not all their possible [inflections](documentation/glossary?term&#x3D;inflection). If you require a full [wordlist](documentation/glossary?term&#x3D;wordlist) including [inflected forms](documentation/glossary?term&#x3D;inflection), contact us and we can help.    &lt;div id&#x3D;\&quot;wordlist\&quot;&gt;&lt;/div&gt;
* @param ctx context.Context for authentication, logging, tracing, etc.
@param sourceLang IANA language code
@param filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5.
@param appId App ID Authentication Parameter
@param appKey App Key Authentication Parameter
@param optional (nil or map[string]interface{}) with one or more of:
    @param "limit" (string) Limit the number of results per response. Default and maximum limit is 5000.
    @param "offset" (string) Offset the start number of the result
@return Wordlist*/
func (a *WordlistApiService) WordlistSourceLangFiltersBasicGet(ctx context.Context, sourceLang string, filtersBasic string, appId string, appKey string, localVarOptionals map[string]interface{}) (Wordlist, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		successPayload     Wordlist
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/wordlist/{source_lang}/{filters_basic}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"filters_basic"+"}", fmt.Sprintf("%v", filtersBasic), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["limit"], "string", "limit"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["offset"], "string", "offset"); err != nil {
		return successPayload, nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["limit"].(string); localVarOk {
		localVarQueryParams.Add("limit", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["offset"].(string); localVarOk {
		localVarQueryParams.Add("offset", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(appId, "")
	localVarHeaderParams["app_key"] = parameterToString(appKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayload, localVarHttpResponse, err
}
