/* 
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
	"fmt"
	"strings"
)

type WordlistApi struct {
	Configuration Configuration
}

func NewWordlistApi() *WordlistApi {
	configuration := NewConfiguration()
	return &WordlistApi{
		Configuration: *configuration,
	}
}

func NewWordlistApiWithBasePath(basePath string) *WordlistApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &WordlistApi{
		Configuration: *configuration,
	}
}

/**
 * Retrieve list of words for category with advanced options
 * Use this to apply more complex filters to the [list of words](documentation/glossary?term&#x3D;wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term&#x3D;sense) match the filter, or only its &#39;prime sense&#39;. You can also filter by word length or match by substring (prefix).     &lt;div id&#x3D;\&quot;wordlist_advanced\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceLang IANA language code
 * @param filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @param exclude Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results.
 * @param excludeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses.
 * @param excludePrimeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only).
 * @param wordLength Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars.
 * @param prefix Filter words that start with prefix parameter
 * @param exact If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string.
 * @param limit Limit the number of results per response. Default and maximum limit is 5000.
 * @param offset Offset the start number of the result.
 * @return *Wordlist
 */
func (a WordlistApi) WordlistSourceLangFiltersAdvancedGet(sourceLang string, filtersAdvanced string, appId string, appKey string, exclude string, excludeSenses string, excludePrimeSenses string, wordLength string, prefix string, exact bool, limit string, offset string) (*Wordlist, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/wordlist/{source_lang}/{filters_advanced}"
	path = strings.Replace(path, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	path = strings.Replace(path, "{"+"filters_advanced"+"}", fmt.Sprintf("%v", filtersAdvanced), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("exclude", a.Configuration.APIClient.ParameterToString(exclude, ""))
			queryParams.Add("exclude_senses", a.Configuration.APIClient.ParameterToString(excludeSenses, ""))
			queryParams.Add("exclude_prime_senses", a.Configuration.APIClient.ParameterToString(excludePrimeSenses, ""))
			queryParams.Add("word_length", a.Configuration.APIClient.ParameterToString(wordLength, ""))
			queryParams.Add("prefix", a.Configuration.APIClient.ParameterToString(prefix, ""))
			queryParams.Add("exact", a.Configuration.APIClient.ParameterToString(exact, ""))
			queryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Wordlist)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Retrieve a list of words in a category
 *  Use this to retrieve a [list of words](documentation/glossary?term&#x3D;wordlist) for particular [domain](documentation/glossary?term&#x3D;domain), [lexical category](documentation/glossary?term&#x3D;lexicalcategory), [register](documentation/glossary?term&#x3D;registers) and/or [region](documentation/glossary?term&#x3D;regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term&#x3D;headword), not all their possible [inflections](documentation/glossary?term&#x3D;inflection). If you require a full [wordlist](documentation/glossary?term&#x3D;wordlist) including [inflected forms](documentation/glossary?term&#x3D;inflection), contact us and we can help.    &lt;div id&#x3D;\&quot;wordlist\&quot;&gt;&lt;/div&gt; 
 *
 * @param sourceLang IANA language code
 * @param filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5.
 * @param appId App ID Authentication Parameter
 * @param appKey App Key Authentication Parameter
 * @param limit Limit the number of results per response. Default and maximum limit is 5000.
 * @param offset Offset the start number of the result
 * @return *Wordlist
 */
func (a WordlistApi) WordlistSourceLangFiltersBasicGet(sourceLang string, filtersBasic string, appId string, appKey string, limit string, offset string) (*Wordlist, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/wordlist/{source_lang}/{filters_basic}"
	path = strings.Replace(path, "{"+"source_lang"+"}", fmt.Sprintf("%v", sourceLang), -1)
	path = strings.Replace(path, "{"+"filters_basic"+"}", fmt.Sprintf("%v", filtersBasic), -1)


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "app_id"
	headerParams["app_id"] = appId
	// header params "app_key"
	headerParams["app_key"] = appKey

	var successPayload = new(Wordlist)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

